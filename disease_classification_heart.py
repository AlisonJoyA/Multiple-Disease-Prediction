# -*- coding: utf-8 -*-
"""Disease classification- heart.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IygcdhT-KLvte4htJo9-4Fn1kIHFTxXY

Import dependancies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Load dataset"""

heart_dataset= pd.read_csv('/content/heart.csv')

"""Analyse Data"""

heart_dataset.head()

heart_dataset.tail()

heart_dataset.describe()

heart_dataset.shape

heart_dataset.info()

heart_dataset.isnull().sum()

heart_dataset['target'].value_counts()

X= heart_dataset.drop(columns='target', axis=1)
Y= heart_dataset['target']

print(X)

print(Y)

"""Split training and testing data"""

X_train, X_test, Y_train, Y_test= train_test_split(X,Y, test_size= 0.2, stratify= Y, random_state=2)
print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

"""Model Training"""

model= LogisticRegression()
model.fit(X_train,Y_train)

"""Model Evaluation"""

predict= model.predict(X_train)
accuracy_on_training_data= accuracy_score(predict, Y_train)
print("Accuracy on the training data is",accuracy_on_training_data)

predict= model.predict(X_test)
accuracy_on_test_data= accuracy_score(predict, Y_test)
print("Accuracy on the testing data is",accuracy_on_test_data)

"""Build prediction system"""

input_data=(40,1,0,110,167,0,0,114,1,2,1,0,3)
#change input data into an array
input_data_as_array= np.asarray(input_data)
#reshape input data array
input_data_reshaped = input_data_as_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)
if(prediction[0]==0):
  print("The person does not have heart disease")
else:
  print("The person has heart disease")

"""Save model"""

import pickle

filename= 'heart_disease_model.sav'
pickle.dump(model, open(filename,'wb'))

loaded_model = pickle.load(open('heart_disease_model.sav', 'rb'))

input_data=(40,1,0,110,167,0,0,114,1,2,1,0,3)
#change input data into an array
input_data_as_array= np.asarray(input_data)
#reshape input data array
input_data_reshaped = input_data_as_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)
if(prediction[0]==0):
  print("The person does not have heart disease")
else:
  print("The person has heart disease")