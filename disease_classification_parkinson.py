# -*- coding: utf-8 -*-
"""Disease classification- parkinson.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_WJca9l7_UyjLLGtVqIzU7kKxEaf-L-u

Import dependancies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Load data"""

parkinsons_data= pd.read_csv('/content/parkinsons.csv')

"""Analyse the data"""

parkinsons_data.head()

parkinsons_data.tail()

parkinsons_data.shape

parkinsons_data.describe()

parkinsons_data.info()

parkinsons_data.isnull().sum()

parkinsons_data['status'].value_counts()

parkinsons_data.groupby('status').mean(numeric_only=True)

"""Data pre-processing"""

X= parkinsons_data.drop(columns=['name','status'], axis=1)
Y= parkinsons_data['status']
print(X)

print(Y)

"""Split data into training and testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size= 0.2, random_state= 2)
print(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)

"""Standardize Data"""

scaler = StandardScaler()
scaler.fit(X_train)

X_train= scaler.transform(X_train)
X_test= scaler.transform(X_test)

print(X_train)

"""Train model"""

model= svm.SVC(kernel='linear')

model.fit(X_train, Y_train)

"""Evaluate model"""

test_predict= model.predict(X_train)
accuracy_on_training_data= accuracy_score(Y_train, test_predict)
print("Accuracy on the training data is", accuracy_on_training_data)

train_predict= model.predict(X_test)
accuracy_on_training_data= accuracy_score(Y_test, train_predict)
print("Accuracy on the testing data is", accuracy_on_training_data)

"""Build prediction system"""

input_data=(119.99200,157.30200,74.99700,0.00784,0.00007,0.00370,0.00554,0.01109,0.04374,0.42600,0.02182,0.03130,0.02971,0.06545,0.02211,21.03300,0.414783,0.815285,-4.813031,0.266482,2.301442,0.284654)
input_data_array= np.asarray(input_data)
input_data_reshaped= input_data_array.reshape(1,-1)
standardize_data= scaler.transform(input_data_reshaped)
predict= model.predict(standardize_data)
print(predict)

if(predict[0]==0):
  print("The person does not have parkinsons")
else:
  print("The person has parkinsons")

"""Saving the model"""

import pickle

filename='parkinsons_model.sav'
pickle.dump(model,open(filename, 'wb'))

loaded_model= pickle.load(open('parkinsons_model.sav','rb'))

input_data=(119.99200,157.30200,74.99700,0.00784,0.00007,0.00370,0.00554,0.01109,0.04374,0.42600,0.02182,0.03130,0.02971,0.06545,0.02211,21.03300,0.414783,0.815285,-4.813031,0.266482,2.301442,0.284654)
input_data_array= np.asarray(input_data)
input_data_reshaped= input_data_array.reshape(1,-1)
standardize_data= scaler.transform(input_data_reshaped)
predict= model.predict(standardize_data)
print(predict)

if(predict[0]==0):
  print("The person does not have parkinsons")
else:
  print("The person has parkinsons")