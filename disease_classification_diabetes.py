# -*- coding: utf-8 -*-
"""Disease Classification- diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17W52nYBTq2WOKfS8Cw3cg7nwwraM-tNh

Import dependancies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and analysis (PIMA Diabetes Dataset)"""

diabetes_dataset = pd.read_csv('/content/diabetes.csv')

diabetes_dataset.head()

diabetes_dataset.shape

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0 represents non diabetic people
1 represents diabetic people
"""

diabetes_dataset.groupby('Outcome').mean()

X= diabetes_dataset.drop('Outcome',axis=1)
Y= diabetes_dataset['Outcome']
print(X)
print(Y)

#standardize the data
scaler = StandardScaler()
scaler.fit(X)
standardized_data= scaler.transform(X)

print(standardized_data)

X = standardized_data
Y= diabetes_dataset['Outcome']
print(X)
print(Y)

"""Split data into training and testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size= 0.2, stratify= Y, random_state=2)
print(X.shape, X_train.shape, X_test.shape)

"""Train the model"""

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train, Y_train)

"""Evaluate the model"""

X_train_predict = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_predict, Y_train)
print('Accuracy score is', training_data_accuracy)

X_test_predict= classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_predict, Y_test)
print('Accuracy score is', test_data_accuracy)

"""Make prediction system"""

input_data = (2,197,70,45,543,30.5,0.158,53)
# change input data into a numpy array
input_data_as_numpy_array = np.asarray(input_data)
#reshap the array to align with the current array requirement for prediction of one data point

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

standardized_input_data = scaler.transform(input_data_reshaped)
print(standardized_input_data)

prediction = classifier.predict(standardized_input_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

"""Saving the trained model"""

import pickle

filename = 'trained_model.sav'
pickle.dump(classifier, open(filename,'wb'))

#load the saved model
loaded_model = pickle.load(open('trained_model.sav','rb'))

input_data = (2,197,70,45,543,30.5,0.158,53)
# change input data into a numpy array
input_data_as_numpy_array = np.asarray(input_data)
#reshap the array to align with the current array requirement for prediction of one data point

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)


prediction = loaded_model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

